{"version":3,"sources":["services/api.js","services/erros.js","components/home/index.js","services/infoPedido.js","components/InfoPedido/index.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["api","axios","create","baseURL","param1","param2","a","data","get","response","integrationError","item","isExported","integrationSuccess","orderDeliveryDateNull","OrderDeliveryDate","length","body","items","errosIntegracao","filter","integrados","deliveryDataNull","getErros","Home","useState","erros","setErros","setIntegrados","setDeliveryDate","setData","useEffect","then","e","integrated","error","delivery","console","log","className","src","width","for","type","name","value","onChange","target","map","erro","key","_id","to","CustomerTaxvat","CustomerOrderNumber","id","infoPedido","PagePedido","useParams","exportMessage","setExportMessage","setIsExported","customerTaxvat","setCustomerTaxVat","customerName","setCustomerName","customerOrderNumber","setCustomerOrderNumber","customerUF","setCustomerUF","orderDate","setOrderDate","orderStatus","setOrderStatus","setProducts","CustomerName","CustomerUF","OrderDate","OrderStatus","Order","Products","Routes","HashRouter","basename","exact","path","component","pagePedido","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qQAMeA,E,OAJHC,EAAMC,OAAO,CAErBC,QAAS,+F,4CCAb,WAAwBC,EAAOC,GAA/B,uBAAAC,EAAA,6DACQC,EAAO,GADf,SAE2BP,EAAIQ,IAAJ,gCAAiCJ,EAAjC,gBAA+CC,IAF1E,cAEUI,EAFV,OAGUC,EAAyB,SAAAC,GAAI,OAAKA,EAAKC,YACvCC,EAAyB,SAAAF,GAAI,OAAGA,EAAKC,YACrCE,EAAwB,SAAAH,GAAI,OAA8B,OAA3BA,EAAKI,mBAI1CR,EAAO,CACHS,OAAQP,EAASF,KAAKU,KAAKC,MAAMF,OACjCG,gBAAiBV,EAASF,KAAKU,KAAKC,MAAME,OAAOV,GACjDW,WAAYZ,EAASF,KAAKU,KAAKC,MAAME,OAAOP,GAC5CS,iBAAkBb,EAASF,KAAKU,KAAKC,MAAME,OAAON,IAb1D,kBAeW,CAACP,EAAKc,WAAYd,EAAKY,gBAAiBZ,EAAKe,mBAfxD,4C,sBAiBeC,M,0EC0CAC,MA3Df,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACJC,EADI,KACGC,EADH,OAEyBF,mBAAS,IAFlC,mBAEJJ,EAFI,KAEQO,EAFR,OAG6BH,mBAAS,IAHtC,mBAGUI,GAHV,aAIaJ,mBAAS,CAAC,eAJvB,mBAIJlB,EAJI,KAIEuB,EAJF,KAyBX,OAnBAC,qBAAW,WACPR,EAAShB,EAAMA,GAAMyB,MAAK,SAAAC,GAAM,IAAD,cACWA,EADX,GACpBC,EADoB,KACRC,EADQ,KACDC,EADC,KAE3BT,EAASQ,GACTP,EAAcM,GACdL,EAAgBO,QACnB,IAELL,qBAAU,WACNJ,EAAS,IACTJ,EAAShB,EAAMA,GAAMyB,MAAK,SAAAC,GAAM,IAAD,cACWA,EADX,GACpBC,EADoB,KACRC,EADQ,KACDC,EADC,KAE3BC,QAAQC,IAAI,WACZX,EAASQ,GACTP,EAAcM,GACdL,EAAgBO,QAEtB,CAAC7B,IAGC,yBAAKgC,UAAU,aACVb,EAAMV,QAAU,GACjB,yBAAKuB,UAAU,SAASC,IAAI,+EAA+EC,MAAM,UAIjH,gDAGA,8BACI,2BAAOC,IAAI,QAAX,SACA,2BAAOC,KAAK,OAAOJ,UAAU,OAAOK,KAAK,OAAOC,MAAOtC,EAAMuC,SAAU,SAACb,GAAOH,EAAQG,EAAEc,OAAOF,WAGpG,6BAASN,UAAU,SACf,wBAAIA,UAAU,SAAd,qBAAyCb,EAAMV,OAAOK,EAAWL,QACjE,wBAAIuB,UAAU,SAAd,oCAAkDb,EAAMV,QACxD,wBAAIuB,UAAU,cAAd,6BAAsDlB,EAAWL,SAEpEU,EAAMV,OAAS,GAChB,6BACA,6BAASuB,UAAU,aACf,4BACKb,EAAMsB,KAAI,SAAAC,GAAI,OACX,kBAAC,IAAD,CAAMV,UAAU,OAAOW,IAAKD,EAAKE,IAAKC,GAAE,kBAAaH,EAAKE,MAAO,wBAAID,IAAKD,EAAKE,KAAK,uBAAGZ,UAAU,WAAb,MAA2BU,EAAKE,KAAnD,IAA4D,uBAAGZ,UAAU,UAAb,WAA+BU,EAAKI,gBAAhG,IAAoH,uBAAGd,UAAU,SAAb,UAA6BU,EAAKK,+B,4CClD/O,WAA0BC,GAA1B,eAAAjD,EAAA,4DACe,GADf,SAE2BN,EAAIQ,IAAJ,gBAAiB+C,IAF5C,cAEU9C,EAFV,OAGmC,SAAAE,GAAI,OAAKA,EAAKC,YACd,SAAAD,GAAI,OAAGA,EAAKC,YACb,SAAAD,GAAI,OAA8B,OAA3BA,EAAKI,mBAL9C,kBAgBWN,EAASF,MAhBpB,4C,sBAkBeiD,M,4CC4BAC,MA/Cf,WAAsB,IACZF,EAAOG,cAAPH,GADW,EAEyB9B,mBAAS,IAFlC,mBAEVkC,EAFU,KAEKC,EAFL,OAGmBnC,mBAAS,IAH5B,mBAGEoC,GAHF,aAI4BpC,mBAAS,IAJrC,mBAIVqC,EAJU,KAIMC,EAJN,OAKwBtC,mBAAS,IALjC,mBAKVuC,EALU,KAKIC,EALJ,OAMqCxC,mBAAS,IAN9C,mBAMVyC,EANU,KAMWC,EANX,OAOmB1C,mBAAS,IAP5B,mBAOV2C,EAPU,KAOEC,EAPF,OAQgB5C,mBAAS,IARzB,mBAQV6C,EARU,KAQAC,EARA,OASqB9C,mBAAS,IAT9B,mBASV+C,EATU,KASGC,EATH,OAUehD,mBAAS,IAVxB,mBAUAiD,GAVA,WA4BjB,OAfA3C,qBAAW,WACPyB,EAAWD,GAAIvB,MAAK,SAAAC,GAChBI,QAAQC,IAAIL,GACZ2B,EAAiB3B,EAAEhB,KAAK0C,eACxBE,EAAc5B,EAAEhB,KAAKL,YACrBmD,EAAkB9B,EAAEhB,KAAKoC,gBACzBY,EAAgBhC,EAAEhB,KAAK0D,cACvBR,EAAuBlC,EAAEhB,KAAKqC,qBAC9Be,EAAcpC,EAAEhB,KAAK2D,YACrBL,EAAatC,EAAEhB,KAAK4D,WACpBJ,EAAexC,EAAEhB,KAAK6D,aACtBJ,EAAYzC,EAAEhB,KAAK8D,MAAMC,eAE9B,IAGC,6BACI,6BAASzC,UAAU,aACf,wBAAIA,UAAU,UAAUoB,GACxB,6BACI,uCAAaG,GACb,qCAAWE,GACX,sCAAYE,GACZ,mCAASE,GACT,+CAAqBE,GACrB,iDAAuBE,OC3B5BS,EATA,WACX,OACI,kBAAC,IAAD,CAAeC,YAAU,EAACC,SAAS,aAC/B,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAKC,UAAW9D,IAClC,kBAAC,IAAD,CAAO6D,KAAK,OAAOC,UAAWC,MCC3BC,MAPf,WACI,OACI,6BACE,kBAAC,EAAD,QCMUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpE,MAAK,SAAAqE,GACjCA,EAAaC,kB","file":"static/js/main.fbd1345a.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n    // 'http://magento-portalas-prd.devparceiroambev.com:3000/order?limit=10000&gte=${param1}&lte=${param2}'\r\n    baseURL: 'https://cors-anywhere.herokuapp.com/http://magento-portalas-prd.devparceiroambev.com:3000/'\r\n});\r\nexport default api","\r\nimport api from './api';\r\n\r\n\r\nasync function getErros(param1,param2){\r\n    let data = {};\r\n    const response = await api.get(`order?limit=10000&gte=${param1}&lte=${param2}`)\r\n    const integrationError    =    item=>  !item.isExported\r\n    const integrationSuccess  =    item=> item.isExported\r\n    const orderDeliveryDateNull = item=> item.OrderDeliveryDate === null;\r\n    //const dataCorreta = item=>item.OrderDate.includes(param1)\r\n    //const dataCorreta2 = item=>item.OrderDate.includes(param2)\r\n    //console.log(response.data.body.items.length)\r\n    data = {\r\n        length: response.data.body.items.length,\r\n        errosIntegracao: response.data.body.items.filter(integrationError),\r\n        integrados: response.data.body.items.filter(integrationSuccess),\r\n        deliveryDataNull: response.data.body.items.filter(orderDeliveryDateNull)\r\n    }\r\n    return [data.integrados, data.errosIntegracao, data.deliveryDataNull]\r\n}\r\nexport default getErros;","import React, {useState, useEffect} from 'react';\r\nimport getErros from '../../services/erros';\r\nimport '../../styles/style.css';\r\nimport { Link } from 'react-router-dom';\r\nfunction Home(){\r\n    const [erros, setErros] = useState([]);\r\n    const [integrados, setIntegrados] = useState([]);\r\n    const [deliveryData, setDeliveryDate] = useState([]);\r\n    const [data, setData] = useState(['2020-02-04']);\r\n\r\n    useEffect( ()=>{\r\n        getErros(data, data).then(e => {\r\n            const [integrated, error, delivery] = e;\r\n            setErros(error);\r\n            setIntegrados(integrated);\r\n            setDeliveryDate(delivery);\r\n    })}, []);\r\n\r\n    useEffect(() =>{\r\n        setErros([]);\r\n        getErros(data, data).then(e => {\r\n            const [integrated, error, delivery] = e;\r\n            console.log(\"request\");\r\n            setErros(error);\r\n            setIntegrados(integrated);\r\n            setDeliveryDate(delivery);\r\n        })\r\n    },[data])\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            {erros.length <= 0 &&\r\n            <img className=\"imagem\" src=\"https://i.pinimg.com/originals/3f/2c/97/3f2c979b214d06e9caab8ba8326864f3.gif\" width=\"100px\"/>\r\n            }\r\n            \r\n            \r\n            <h1>Overview Pedidos</h1>\r\n            \r\n            \r\n            <form>\r\n                <label for=\"data\">Data:</label>\r\n                <input type=\"date\" className=\"data\" name=\"data\" value={data} onChange={(e) => {setData(e.target.value)}}/>\r\n            </form>\r\n            \r\n            <section className=\"geral\">\r\n                <h2 className=\"total\">Total de Pedidos: {erros.length+integrados.length}</h2>\r\n                <h2 className=\"erros\">Total erros de Integração: {erros.length}</h2>\r\n                <h2 className=\"integrados\">Total Pedidos integrados: {integrados.length}</h2>\r\n            </section>\r\n            {erros.length > 0 &&\r\n            <div>\r\n            <section className=\"listErros\">\r\n                <ul>\r\n                    {erros.map(erro => (\r\n                        <Link className=\"link\" key={erro._id} to={`reactjs/${erro._id}`}><li key={erro._id}><a className=\"erro_id\">ID:{erro._id}</a> <a className=\"taxvat\">TAXVAT: {erro.CustomerTaxvat}</a> <a className=\"order\">ORDER: {erro.CustomerOrderNumber}</a></li></Link>\r\n                    ))}\r\n                </ul>\r\n            </section>\r\n            </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\nexport default Home;","\r\nimport api from './api';\r\n\r\n\r\nasync function infoPedido(id){\r\n    let data = {};\r\n    const response = await api.get(`order/${id}`)\r\n    const integrationError    =    item=>  !item.isExported\r\n    const integrationSuccess  =    item=> item.isExported\r\n    const orderDeliveryDateNull = item=> item.OrderDeliveryDate === null;\r\n    //const dataCorreta = item=>item.OrderDate.includes(param1)\r\n    //const dataCorreta2 = item=>item.OrderDate.includes(param2)\r\n    //console.log(response.data.body.items.length)\r\n    /*data = {\r\n        length: response.data.body.items.length,\r\n        errosIntegracao: response.data.body.items.filter(integrationError),\r\n        integrados: response.data.body.items.filter(integrationSuccess),\r\n        deliveryDataNull: response.data.body.items.filter(orderDeliveryDateNull)\r\n    }*/\r\n    //console.log(response.data)\r\n    return response.data;\r\n}\r\nexport default infoPedido;","import React, {useState, useEffect} from 'react';\r\nimport { useParams } from 'react-router';\r\nimport infoPedido from '../../services/infoPedido';\r\nfunction PagePedido(){\r\n    let { id } = useParams();\r\n    const [exportMessage, setExportMessage] = useState([]);\r\n    const [isExported, setIsExported] = useState([]);\r\n    const [customerTaxvat, setCustomerTaxVat] =  useState([]);\r\n    const [customerName, setCustomerName] =  useState([]);\r\n    const [customerOrderNumber, setCustomerOrderNumber] = useState([]);\r\n    const [customerUF, setCustomerUF] = useState([]);\r\n    const [orderDate,setOrderDate] = useState([]);\r\n    const [orderStatus, setOrderStatus] = useState([]);\r\n    const [products, setProducts] = useState([]);\r\n\r\n    \r\n    useEffect( ()=>{\r\n        infoPedido(id).then(e =>{\r\n            console.log(e)\r\n            setExportMessage(e.body.exportMessage);\r\n            setIsExported(e.body.isExported);\r\n            setCustomerTaxVat(e.body.CustomerTaxvat);\r\n            setCustomerName(e.body.CustomerName);\r\n            setCustomerOrderNumber(e.body.CustomerOrderNumber);\r\n            setCustomerUF(e.body.CustomerUF);\r\n            setOrderDate(e.body.OrderDate);\r\n            setOrderStatus(e.body.OrderStatus);\r\n            setProducts(e.body.Order.Products);\r\n        });\r\n    }, []);\r\n    \r\n    return(\r\n        <div>\r\n            <section className=\"container\">\r\n                <h1 className=\"titulo\">{exportMessage}</h1>\r\n                <div>\r\n                    <h2>taxvat: {customerTaxvat}</h2>\r\n                    <h2>Rede: {customerName}</h2>\r\n                    <h2>Ordem: {customerOrderNumber}</h2>\r\n                    <h2>UF: {customerUF}</h2>\r\n                    <h2>Data do pedido: {orderDate}</h2>\r\n                    <h2>Status do Pedido: {orderStatus}</h2>\r\n                </div>\r\n\r\n\r\n            </section>\r\n            \r\n        </div>\r\n    );\r\n}\r\nexport default PagePedido;","import React from 'react';\r\nimport {BrowserRouter, Route, HashRouter} from 'react-router-dom';\r\nimport Home from './components/home';\r\nimport pagePedido from './components/InfoPedido';\r\n\r\nconst Routes = () =>{\r\n    return(\r\n        <BrowserRouter HashRouter basename='/reactjs/'>\r\n            <Route exact path=\"/\"  component={Home}/>\r\n            <Route path=\"/:id\" component={pagePedido}/>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default Routes;","import React from 'react';\r\nimport getErros from './services/erros';\r\nimport Routes from './routes';\r\nfunction App(){\r\n    return(\r\n        <div>\r\n          <Routes />\r\n        </div>\r\n    );\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}